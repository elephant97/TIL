# **어떤 데이터베이스를 사용할 것인가?       (RDB vs NoSQL)**

<aside>
💡 RDB와 NoSQL 데이터베이스는 서로 다른 데이터 저장 및 관리 접근 방식을 제공한다.

</aside>

<aside>
💡 적합한 데이터베이스 선택은 데이터의 구조, 규모, 처리 속도, 확장성 일관성 요구 사항 등을 고려하여 결정 한다.

</aside>

### **RDB가 적합한 경우**

- **정형 데이터** 
: 데이터가 명확하게 정의된 스키마에 따라 구조화 되어있고 엄격한 데이터 무결성이 필요한 경우
    - ✅ 데이터가 명확하게 정의 된 스키마란?
        - 데이터베이스 내의 데이터 구조를 명시적으로 정의한 것.
        - 스키마의 주요 구성 요소 : 테이블, 컬럼, 행, 데이터 타입, 제약조건, 관계 등
    - ✅ 스키마의 주요 구성요소
        - 테이블 : 데이터가 저장되는 구조회된 프레임. 행(레코드)과 열(필드)로 구성
        - 컬럼 : 테이블의 열로, 테이블 내 각 항목의 데이터 타입을 정의
        - 행 : 테이블의 각 레코드로, 틀정 항목의 데이터를 포함
        - 데이터 타입 : 컬럼에 저장할 수 있는 데이터의 유형 명시
        - 제약조건: 데이터의 무결성을 유지하기 위해 특정 컬럼에 적용되는 규칙 
        ex) 기본키 : 각 행을 고유하게 식별하는 데 사용
        - 관계: 테이블 간의 연결을 정의
        ex) 외래키 :  한 테이블의 컬럼이 다른 테이블의 행을 참조하는데 사용
    - ✅ 스키마의 중요성
        - 데이터 무결성 유지 
        : 스키마는 데이터가 특정 규칙과 구조에 따라 저장되도록 하여, 데이터베이스 내의 정보가 정확하고 일관되게 유지되도록 함
        - 애플리케이션 개발 용이성
        : 개발자는 데이터베이스 스키마를 참조하여 애플리케이션을 구현하고, 어떤 데이터가 어떻게 저장되어야 하는지 이해할 수 있음
        - 데이터 접근 최적화
        : 명확한 스키마는 데이터베이스 설계를 최적화하고, 효율적인 데이터 검색 및 관리를 가능하게 함

- **복잡한 쿼리와 조인이 필요한 경우**
: 관계형 데이터베이스는 복잡한 쿼리를 지원하고, 효율적인 데이터 조인으로 높은 수준의 데이터 분석과 보고가 가능하다.
    - ✅ 조인의 종류
        - INNER JOIN
            - 두 테이블의 교집합을 결과로 반환
            - 조인 조건을 만족하는 행만을 결과 테이블에 포함
            - 양쪽 테이블 모두에서 일치하는 데이터가 있는 경우에만 해당 데이터 포함
        - OUTER JOIN
            - LEFT OUTER JOIN
                - 왼쪽 테이블의 모든 행과 오른쪽 테이블에서 일치하는 행을 반환
                - 오른쪽 테이블에 일치하는 행이 없는 경우, 결과 테이블에서 해당 행의 오른쪽 열 값은 NULL로 표시됨
            - RIGHT OUTER JOIN
                - 오른쪽 테이블의 모든 행과 왼쪽 테이블에서 일치하는 행을 반환
                - 왼쪽 테이블에 일치하는 행이 없는 경우, 결과 테이블에서 해당 행의 왼쪽 열 값은 NULL로 표시됨
            - FULL OUTER JOIN
                - 왼쪽과 오른쪽 테이블 양쪽의 모든 행을 반환
                - 양쪽 테이블에서 일치하는 행이 없는 경우 해당 행의 다른 테이블 열 값은 NULL로 표시됨
        - CROSS JOIN
            - 첫 번째 테이블의 각 행을 두 번째 테이블의 각 행과 결합
            - 결과는 두 테이블의 행 수를 곱한 것과 같은 크기의 결과 테이블을 생성함
            - 특정 조인 조건 없이 두 테이블의 모든 가능한 조합을 생성
        - SELF JOIN
            - 테이블을 자기 자신과 조인하는 것
            - 별칭을 사용하여 동일 테이블을 마치 두 개의 별도 테이블처럼 처리하며, 테이블 내에서 관계를 찾거나 비교할 때 사용
        - NATURAL JOIN
            - 두 테이블 간에 같은 이름을 가진 모든 열에 대해 내부 조인을 수행함
            - 명시적으로 조인 조건을 지정하지 않으며, 같은 이름의 열을 기준으로 자동으로 조인함

- **트랜잭션의 일관성과 안정성이 중요한 경우**
: 금융, 회계 , 인사관리 시스템 등과 같이 ACID 트랜잭션 속성을 요구하는 애플리케이션에 적합.
    - ✅ ACID 트랜잭션 속성이란?
        
        > 데이터의 무결성과 신뢰성을 보장하기 위한 기본적인 원칙
        > 
        - **Atomicity(원자성)**
            - 트랜잭션이 데이터베이스에 모두 반영되거나 전혀 반영되지 않아야 함을 의미
            - 즉, 트랜잭션 내의 모든 연산이 성공적으로 완료되면 트랜잭션은 ‘성공’으로 간주되고 하나라도 실패되는 경우 트랜잭션 전체가 롤백 됨
            - 전부 OR 전무 의 원칙을 따름
        - **Consistency(일관성)**
            - 트랜잭션이 실행되기 전과 후에 데이터베이스가 일관된 상태를 유지해야 한다는 원칙
            - 트랜잭션은 데이터베이스의 모든 무결성 제약 조건을 만족시켜야 함
            - 트랜잭션의 실행 결과는 항상 데이터베이스의 일관성 있는 상태를 보장해야 하
        - Isolation(격리성)
            - 동시에 실행되는 여러 트랜잭션이 서로 영향을 주지 않도록 격리시키는 원칙
            - 각 트랜잭션이 독립적으로 실행되는 것처럼 보장하여, 동시성 제어를 통해 데이터의 정확성을 유지함
            - 격리 수준에 따라 동시에 실행되는 트랜잭션 간의 상호 작용 정도가 결정
        - Durability(지속성)
            - 트랜잭션이 성공적으로 완료된 후에는, 그 결과가 시스템 장애가 발생하더라도 영구적으로 반영되어야 함을 의미
            - 즉, 트랜잭션의 변경 사항은 데이터베이스에 영구적으로 저장되어, 시스템이 다운되거나 장애가 발생해도 유지됨

- **중소규모 데이터베이스**
: 데이터 규모가 상대적으로 작고, 복잡도가 높지 않은 시스템에 적합.

### **NoSQL이 적합한 경우**

- **비정형 데이터 또는 반정형 데이터**
: 소셜 미디어 데이터, 로그 데이터 등 다양한 형태의 데이터를 유연하게 저장할 수 있다.
    - ✅ 비정형 데이터, 반정형 데이터란?
        - 비정형 데이터
            - 명확한 구조가 없거나 일반적인 데이터 베이스 시스템에서 쉽게 저장, 조회, 분석
            하기 어려운 형태의 데이터
            - 이러한 데이터는 종종 텍스트와 멀티미디어 콘텐츠를 포함함
            - 예시)
                - 텍스트 파일: 이메일, 기사, PDF 문서, 소셜 미디어 게시물 등
                - 멀티미디어: 이미지, 오디오, 비디오 파일
                - 웹 페이지: HTML문서, 블로그 게시물
                - 기타: 로그 파일, 위성 이미지, 과학적 연구 데이터 등
        - 반정형 데이터
            - 일부 구조적 요소를 가지고 있지만, 표준 데이터베이스와 같은 엄격한 구조
            (테이블, 열, 행 등)에는 따르지 않는 데이터
            - 메타데이터나 태그를 사용하여 데이터 내의 항목을 구분하고, 이를 통해
            데이터를 더 쉽게 조회하고 분석할 수 있음
            - 예시)
                - XML: 계층적 데이터 구조를 가지며, 태그를 사용해 데이터 항목 정의
                - JSON: 웹 애플리케이션 간 데이터 교환에 널리 사용되며 키-값 쌍으로 데이터 구조화
                - YAML: 구성 파일, 데이터 교환 등에 사용되며 가독성이 높은 데이터 형식
                - 이메일: 헤더, 메타데이터, 본문 등을 포함하여 일정한 구조를 가지고 있으나, 
                본문 내용은 비정형 데이터로 간주될 수 있음
    
- **대규모 분산 데이터 처리가 필요한 경우**
: NoSQL 데이터베이스는 수평 확장이 용이하여 대량의 데이터를 처리하고 저장하기 적합
    - ✅ 수평 확장이란?
        - 수평확장(Horizontal Scaling), 또는 스케일 아웃은 시스템의 처리 능력을 증가시키기 위해
        더 많은 머신(서버)를 추가하는 방식을 의미
        - 이 방법은 시스템의 부하를 분산시키고, 동시에 더 많은 요청을 처리할 수 있도록 함으로써 전체 시스템의 성능과 용량을 향상 시킴
        - ✅ 수평확장의 특징
            - 탄력성
                - 필요에 따라 자원을 추가하거나 제거함으로써 시스템의 탄력성을 높일 수 있음
                - 특히 클라우드 컴퓨팅 환경에서 유리하며 자원 사용량에 따라 비용을 최적화할 수 있음
            - 고가용성
                - 여러 서버에 걸쳐 시스템이 구성되므로 한 서버에 문제가 발생하더라도 다른 서버가 요청을 처리할 수 있어 시스템 전체적인 가용성이 높아짐
            - 부하 분산
                - 시스템 부하를 여러 서버에 분산시켜, 단일 서버에 집중되는 부하를 줄이고 전체적인 처리 능력을 향상시킴
        - ✅ 수평 확장 적용 분야
            - 빅데이터 처리, 웹 애플리케이션, 분산 데이터베이스 및 마이크로서비스 아키텍처 등 다양한 분야에 사용 됨
            - 특히, NoSQL 데이터베이스, 검색 엔진, 캐싱 시스템 등은 수평 확장을 통해 높은 성능과 
            확장성을 달성할 수 있도록 설계됨
    
- **빠른 읽기/쓰기 성능이 요구되는 경우**
: 웹 콘텐츠 관리, 실시간 분석, 빅데이터 처리 등 빠른 데이터 접근이 중요한 애플리케이션에 유리
- **유연한 스키마가 필요한 경우**
: 데이터 모델이 자주 변경되거나, 애플리케이션 개발이 빠른 속도로 진행되어야 하는 환경에서 유리
